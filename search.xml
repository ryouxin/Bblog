<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>ssh登录</title>
      <link href="/2019/06/17/ssh/"/>
      <url>/2019/06/17/ssh/</url>
      
        <content type="html"><![CDATA[<p>秘钥登录</p><ol><li>打开 SSH 客户端（ Mac 自带终端）。</li><li>输入 ssh <a href="mailto:root@x.x.x.x" target="_blank" rel="noopener">root@x.x.x.x</a> 或者输入 ssh -q -l root -p 22 x.x.x.x</li><li>输入密码。</li></ol><p>证书登录</p><ol><li>打开 SSH 客户端（ Mac 自带终端）。</li><li>查找您云服务器关联的 SSH 密钥文件本地存放地址。</li><li><p>密钥必须不公开可见，SSH 才能工作。<br> chmod 400 documents/summary/tencentcloud/tencent_cloud_ssh.dms</p></li><li><p>输入命令：ssh [-i 密钥文件路径] <a href="mailto:root@x.x.x.x" target="_blank" rel="noopener">root@x.x.x.x</a>。<br> ssh -i “documents/summary/tencentcloud/tencent_cloud_ssh.dms” <a href="mailto:root@x.x.x.x" target="_blank" rel="noopener">root@x.x.x.x</a></p></li></ol>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>php混淆文件</title>
      <link href="/2019/06/13/php%E6%B7%B7%E6%B7%86/"/>
      <url>/2019/06/13/php%E6%B7%B7%E6%B7%86/</url>
      
        <content type="html"><![CDATA[<p>使用方式：</p><p>修改 filename 为文件名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line"> </span><br><span class="line"> function RandAbc($length = &quot;&quot;) &#123; // 返回随机字符串  </span><br><span class="line">     $str = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;;  </span><br><span class="line">     return str_shuffle($str);  </span><br><span class="line"> &#125;   </span><br><span class="line"> </span><br><span class="line"> $filename = &apos;Api.php&apos;; //要加密的文件  </span><br><span class="line"> $T_k1 = RandAbc(); //随机密匙1  </span><br><span class="line"> $T_k2 = RandAbc(); //随机密匙2  </span><br><span class="line"> $vstr = file_get_contents($filename);  </span><br><span class="line"> $v1 = base64_encode($vstr);  </span><br><span class="line"> $c = strtr($v1, $T_k1, $T_k2); //根据密匙替换对应字符。  </span><br><span class="line"> $c = $T_k1.$T_k2.$c;  </span><br><span class="line"> $q1 = &quot;O00O0O&quot;;  </span><br><span class="line"> $q2 = &quot;O0O000&quot;;  </span><br><span class="line"> $q3 = &quot;O0OO00&quot;;  </span><br><span class="line"> $q4 = &quot;OO0O00&quot;;  </span><br><span class="line"> $q5 = &quot;OO0000&quot;;  </span><br><span class="line"> $q6 = &quot;O00OO0&quot;;  </span><br><span class="line"> $s = &apos;$&apos;.$q6.&apos;=urldecode(&quot;%6E1%7A%62%2F%6D%615%5C%76%740%6928%2D%70%78%75%71%79%2A6%6C%72%6B%64%679%5F%65%68%63%73%77%6F4%2B%6637%6A&quot;);$&apos;.$q1.&apos;=$&apos;.$q6.&apos;&#123;3&#125;.$&apos;.$q6.&apos;&#123;6&#125;.$&apos;.$q6.&apos;&#123;33&#125;.$&apos;.$q6.&apos;&#123;30&#125;;$&apos;.$q3.&apos;=$&apos;.$q6.&apos;&#123;33&#125;.$&apos;.$q6.&apos;&#123;10&#125;.$&apos;.$q6.&apos;&#123;24&#125;.$&apos;.$q6.&apos;&#123;10&#125;.$&apos;.$q6.&apos;&#123;24&#125;;$&apos;.$q4.&apos;=$&apos;.$q3.&apos;&#123;0&#125;.$&apos;.$q6.&apos;&#123;18&#125;.$&apos;.$q6.&apos;&#123;3&#125;.$&apos;.$q3.&apos;&#123;0&#125;.$&apos;.$q3.&apos;&#123;1&#125;.$&apos;.$q6.&apos;&#123;24&#125;;$&apos;.$q5.&apos;=$&apos;.$q6.&apos;&#123;7&#125;.$&apos;.$q6.&apos;&#123;13&#125;;$&apos;.$q1.&apos;.=$&apos;.$q6.&apos;&#123;22&#125;.$&apos;.$q6.&apos;&#123;36&#125;.$&apos;.$q6.&apos;&#123;29&#125;.$&apos;.$q6.&apos;&#123;26&#125;.$&apos;.$q6.&apos;&#123;30&#125;.$&apos;.$q6.&apos;&#123;32&#125;.$&apos;.$q6.&apos;&#123;35&#125;.$&apos;.$q6.&apos;&#123;26&#125;.$&apos;.$q6.&apos;&#123;30&#125;;eval($&apos;.$q1.&apos;(&quot;&apos;.base64_encode(&apos;$&apos;.$q2.&apos;=&quot;&apos;.$c.&apos;&quot;;eval(\&apos;?&gt;\&apos;.$&apos;.$q1.&apos;($&apos;.$q3.&apos;($&apos;.$q4.&apos;($&apos;.$q2.&apos;,$&apos;.$q5.&apos;*2),$&apos;.$q4.&apos;($&apos;.$q2.&apos;,$&apos;.$q5.&apos;,$&apos;.$q5.&apos;),$&apos;.$q4.&apos;($&apos;.$q2.&apos;,0,$&apos;.$q5.&apos;))));&apos;).&apos;&quot;));&apos;;  </span><br><span class="line"> </span><br><span class="line"> $s = &apos;&lt;?php &apos;.&quot;\n&quot;.$s.&quot;\n&quot;.&apos; ?&gt;&apos;;  </span><br><span class="line"> //echo $s;  </span><br><span class="line"> // 生成 加密后的PHP文件  </span><br><span class="line"> $fpp1 = fopen(&apos;temp_&apos;.$filename, &apos;w&apos;);  </span><br><span class="line"> fwrite($fpp1, $s) or die(&apos;写文件错误&apos;);  </span><br><span class="line"> </span><br><span class="line"> ?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>android选择打包类型(release、debug)</title>
      <link href="/2019/06/04/android%E9%80%89%E6%8B%A9%E6%89%93%E5%8C%85%E7%B1%BB%E5%9E%8B(release%E3%80%81debug)/"/>
      <url>/2019/06/04/android%E9%80%89%E6%8B%A9%E6%89%93%E5%8C%85%E7%B1%BB%E5%9E%8B(release%E3%80%81debug)/</url>
      
        <content type="html"><![CDATA[<ol><li>在Android Studio 顶部栏中有Build 下拉菜单中有 select Build Variants… </li><li>在Build Variants 中model 选择需要输出的arr 包类型，debug 或者 release 类型</li><li>在Android Studio 顶部栏中有Build 下拉菜单中有 Rebuild Project</li><li>在Model 的build/outputs/arr/ 输出arr 文件</li></ol>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>linux配置开机脚本、以其他用户身份运行</title>
      <link href="/2019/04/26/linux%E9%85%8D%E7%BD%AE%E5%BC%80%E6%9C%BA%E8%84%9A%E6%9C%AC/"/>
      <url>/2019/04/26/linux%E9%85%8D%E7%BD%AE%E5%BC%80%E6%9C%BA%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>1.开机脚本</p><p>linux开机的时候会自动执行 /etc/rc.local 里面的命令<br>将命令写在 exit 0 之前便可执行</p><p>2.以其他用户身份运行</p><p>以其他身份用户运行并修改可以避免操作修改了文件所有者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - ubuntu -c &apos;cd COMMAND&apos;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>php7安装redis扩展</title>
      <link href="/2019/04/12/php7%E5%AE%89%E8%A3%85redis%E6%89%A9%E5%B1%95/"/>
      <url>/2019/04/12/php7%E5%AE%89%E8%A3%85redis%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get upgrade</span><br><span class="line">apt-get install php7.0-dev        # 为了有phpize命令</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/phpredis/phpredis.git # 下载redi包，需要翻墙才能下载</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd phpredis</span><br><span class="line">git checkout php7</span><br><span class="line">phpize</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">cd ..</span><br><span class="line">rm -rf phpredis</span><br></pre></td></tr></table></figure><p>最后将 extension=redis.so 写入php.ini文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用gitlab CI/CD 完成自动部署</title>
      <link href="/2019/02/15/%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/02/15/%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>添加Gitlab的官方源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># For Debian/Ubuntu</span><br><span class="line">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.deb.sh | sudo bash</span><br><span class="line"></span><br><span class="line"># For CentOS</span><br><span class="line">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure></p><p>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># For Debian/Ubuntu</span><br><span class="line">sudo apt-get install gitlab-ci-multi-runner</span><br><span class="line"></span><br><span class="line"># For CentOS</span><br><span class="line">sudo yum install gitlab-ci-multi-runner</span><br></pre></td></tr></table></figure></p><p>注册Runner<br>Runner需要注册到Gitlab才可以被项目所使用，一个gitlab-ci-multi-runner服务可以注册多个Runner。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ sudo gitlab-ci-multi-runner register</span><br><span class="line"></span><br><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )</span><br><span class="line">https://mygitlab.com/ci</span><br><span class="line">Please enter the gitlab-ci token for this runner</span><br><span class="line">xxx-xxx-xxx</span><br><span class="line">Please enter the gitlab-ci description for this runner</span><br><span class="line">my-runner</span><br><span class="line">INFO[0034] fcf5c619 Registering runner... succeeded</span><br><span class="line">Please enter the executor: shell, docker, docker-ssh, ssh?</span><br><span class="line">docker</span><br><span class="line">Please enter the Docker image (eg. ruby:2.1):</span><br><span class="line">node:4.5.0</span><br><span class="line">INFO[0037] Runner registered successfully. Feel free to start it, but if it&apos;s</span><br><span class="line">running already the config should be automatically reloaded!</span><br></pre></td></tr></table></figure></p><p>更新Runner<br>如果需要更新Runner，只需要执行以下脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># For Debian/Ubuntu</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install gitlab-ci-multi-runner</span><br><span class="line"></span><br><span class="line"># For CentOS</span><br><span class="line">sudo yum update</span><br><span class="line">sudo yum install gitlab-ci-multi-runner</span><br></pre></td></tr></table></figure><br>  Runner高级配置<br>通过gitlab-ci-multi-runner register注册的Runner配置会存储在/etc/gitlab-runner/config.toml中，如果需要修改可直接编辑该文件。详见这里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">concurrent = 4</span><br><span class="line">check_interval = 0</span><br><span class="line"></span><br><span class="line">[[runners]]</span><br><span class="line">  name = &quot;test&quot;</span><br><span class="line">  url = &quot;http://your-domain.com/ci&quot;</span><br><span class="line">  token = &quot;your-token&quot;</span><br><span class="line">  executor = &quot;docker&quot;</span><br><span class="line">  [runners.docker]</span><br><span class="line">    tls_verify = false</span><br><span class="line">    image = &quot;node:4.5.0&quot;</span><br><span class="line">    privileged = false</span><br><span class="line">    disable_cache = false</span><br><span class="line">    volumes = [&quot;/cache&quot;]</span><br><span class="line">  [runners.cache]</span><br><span class="line">  [runners.kubernetes]</span><br><span class="line">    host = &quot;&quot;</span><br><span class="line">    cert_file = &quot;&quot;</span><br><span class="line">    key_file = &quot;&quot;</span><br><span class="line">    ca_file = &quot;&quot;</span><br><span class="line">    image = &quot;&quot;</span><br><span class="line">    namespace = &quot;&quot;</span><br><span class="line">    privileged = false</span><br><span class="line">    cpus = &quot;&quot;</span><br><span class="line">    memory = &quot;&quot;</span><br><span class="line">    service_cpus = &quot;&quot;</span><br><span class="line">    service_memory = &quot;&quot;</span><br></pre></td></tr></table></figure><br>到这里我们的Runner就安装配置好了，接下来是对项目根目录中.gitlab-ci.yml进行配置。</p><p>配置构建任务<br>在项目根目录添加.gitlab-ci.yml文件<br>关于该文件的各项配置请见</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 这里使用了我自己的docker image，配置了自己需要的环境</span><br><span class="line">image: wuyanxin/node</span><br><span class="line"></span><br><span class="line">variables:</span><br><span class="line">MYSQL_DATABASE: wan_ark-unit</span><br><span class="line">MYSQL_ALLOW_EMPTY_PASSWORD: &quot;yes&quot;</span><br><span class="line"></span><br><span class="line"># 关于service请见: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-service</span><br><span class="line">services:</span><br><span class="line">- mysql:5.6</span><br><span class="line">- redis:3.2.4</span><br><span class="line"></span><br><span class="line">stages:</span><br><span class="line">- test</span><br><span class="line">- eslint</span><br><span class="line">- deploy</span><br><span class="line"></span><br><span class="line">before_script:</span><br><span class="line">- echo &apos;REDIS_HOST=redis&apos; &gt;&gt; .env</span><br><span class="line">- echo &apos;DB_HOST=mysql&apos; &gt;&gt; .env</span><br><span class="line">- yarn install</span><br><span class="line"></span><br><span class="line">test_service:</span><br><span class="line">stage: test</span><br><span class="line">script:</span><br><span class="line">- npm run build</span><br><span class="line">- npm test</span><br><span class="line"></span><br><span class="line">eslint_src: </span><br><span class="line">stage: eslint</span><br><span class="line">script:</span><br><span class="line">- npm run lint</span><br><span class="line">allow_failure: true</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">stage: deploy</span><br><span class="line">script:</span><br><span class="line">- echo &apos;deployd!&apos;</span><br><span class="line">only: </span><br><span class="line">- master</span><br></pre></td></tr></table></figure><br>这里使用了nodejs项目作为例子，其他语言类似语法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue引用element-ui与webpack</title>
      <link href="/2019/02/12/vue%E5%BC%95%E7%94%A8element-ui/"/>
      <url>/2019/02/12/vue%E5%BC%95%E7%94%A8element-ui/</url>
      
        <content type="html"><![CDATA[<p>从新建vue项目到引入组件Element<br>一、新建项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.查看 node和npm是不是已经安装好命令：node -v  npm -v (没有安装的先安装环境);</span><br><span class="line">2.npm install -g cnpm --registry=https://registry.npm.taobao.org  (安装国内的淘宝镜像文件，后面的安装npm可以全部改为cnpm)</span><br><span class="line">3.安装 vue-cli   </span><br><span class="line">1、cnpm install -g vue</span><br><span class="line">2、cnpm install -g vue-cli </span><br><span class="line">4. 安装 webpack   cnpm install -g webpack </span><br><span class="line">5.cd  你的运行目录</span><br><span class="line">6.新建vue项目      vue init webpack vuedemo</span><br><span class="line">7.进入项目目录     cd vuedemo</span><br><span class="line">8.安装依赖        cnpm install</span><br><span class="line">9.运行项目        cnpm run dev</span><br><span class="line">10.发布项目       cnpm run build</span><br><span class="line">注：mac电脑需要在安装淘宝镜像前执行： sudo chown -R $USER /usr/local</span><br></pre></td></tr></table></figure><br>二、使用element-ui前需安装修改的配置：</p><ol><li>安装 loader 模块：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cnpm install style-loader -D</span><br><span class="line">cnpm install css-loader -D</span><br><span class="line">cnpm install file-loader -D</span><br></pre></td></tr></table></figure></li><li>安装 Element-UI 模块<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install element-ui --save </span><br></pre></td></tr></table></figure>三、引入Element，前面已经全局安装了element-ui，只需要在Vue项目中引入即可<br>打开项目：src/main.js,添加下面三条<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import ElementUI from &apos;element-ui&apos;</span><br><span class="line">import &apos;element-ui/lib/theme-chalk/index.css&apos;</span><br><span class="line">Vue.use(ElementUI)</span><br></pre></td></tr></table></figure></li></ol><p>四、然后在.vue文件里就直接可以用了</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Cytoscape在vue中安装实例</title>
      <link href="/2019/02/11/Cytoscape%E5%9C%A8vue%E4%B8%AD%E5%AE%89%E8%A3%85%E5%AE%9E%E4%BE%8B/"/>
      <url>/2019/02/11/Cytoscape%E5%9C%A8vue%E4%B8%AD%E5%AE%89%E8%A3%85%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>首先创建vue项目，并在项目下安装Cytoscape包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue create test #创建vue项目</span><br><span class="line">cd test</span><br><span class="line">npm i cytoscape --save #加载cytoscape模块</span><br></pre></td></tr></table></figure><br>创建index.vue文件并且写入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;cy&quot; style=&quot;width: 100%;height: 100%;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var cytoscape = require(&quot;cytoscape&quot;);</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Cytoscape&quot;,</span><br><span class="line">  components: &#123;&#125;,</span><br><span class="line">  created: function() &#123;&#125;,</span><br><span class="line">  data: function() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      input: &quot;&quot;,</span><br><span class="line">      output: &quot;&quot;,</span><br><span class="line">      msg: &quot;vue to cytoscape&quot;,</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    add_node: function() &#123;</span><br><span class="line">      console.info(this.cy);</span><br><span class="line">      this.cy.add([</span><br><span class="line">        &#123;</span><br><span class="line">          group: &quot;nodes&quot;,</span><br><span class="line">          data: &#123; id: &quot;node&quot; + this.count &#125;,</span><br><span class="line">          position: &#123; x: 300, y: 200 &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          group: &quot;edges&quot;,</span><br><span class="line">          data: &#123;</span><br><span class="line">            id: &quot;edge&quot; + this.count,</span><br><span class="line">            source: &quot;node&quot; + this.count,</span><br><span class="line">            target: &quot;cat&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]);</span><br><span class="line">    &#125;,</span><br><span class="line">    view_init: function() &#123;</span><br><span class="line">      this.cy = cytoscape(&#123;</span><br><span class="line">        container: document.getElementById(&quot;cy&quot;),</span><br><span class="line">        boxSelectionEnabled: false,</span><br><span class="line">        autounselectify: true,</span><br><span class="line">        style: cytoscape</span><br><span class="line">          .stylesheet()</span><br><span class="line">          .selector(&quot;node&quot;)</span><br><span class="line">          .css(&#123;</span><br><span class="line">            height: 80,</span><br><span class="line">            width: 80,</span><br><span class="line">            &quot;background-fit&quot;: &quot;cover&quot;,</span><br><span class="line">            &quot;border-color&quot;: &quot;#000&quot;,</span><br><span class="line">            &quot;border-width&quot;: 3,</span><br><span class="line">            &quot;border-opacity&quot;: 0.5,</span><br><span class="line">            content: &quot;data(id)&quot;,</span><br><span class="line">            &quot;text-valign&quot;: &quot;center&quot;</span><br><span class="line">          &#125;)</span><br><span class="line">          .selector(&quot;.aa&quot;)</span><br><span class="line">          .css(&#123;</span><br><span class="line">            height: 80,</span><br><span class="line">            width: 80,</span><br><span class="line">            &quot;background-fit&quot;: &quot;cover&quot;,</span><br><span class="line">            &quot;border-color&quot;: &quot;red&quot;,</span><br><span class="line">            &quot;border-width&quot;: 3,</span><br><span class="line">            &quot;border-opacity&quot;: 0.5,</span><br><span class="line">            &quot;background-color&quot;: &quot;red&quot;,</span><br><span class="line">            content: &quot;data(id)&quot;,</span><br><span class="line">            &quot;text-valign&quot;: &quot;center&quot;,</span><br><span class="line">            &quot;line-color&quot;: &quot;red&quot;,</span><br><span class="line">          &#125;)</span><br><span class="line">          </span><br><span class="line">          .selector(&quot;edge&quot;)</span><br><span class="line">          .css(&#123;</span><br><span class="line">            width: 6,</span><br><span class="line">            &quot;target-arrow-shape&quot;: &quot;triangle&quot;,</span><br><span class="line">            &quot;line-color&quot;: &quot;#ffaaaa&quot;,</span><br><span class="line">            &quot;target-arrow-color&quot;: &quot;#ffaaaa&quot;,</span><br><span class="line">            &quot;curve-style&quot;: &quot;bezier&quot;</span><br><span class="line">          &#125;)</span><br><span class="line">          .selector(&quot;.bb&quot;)</span><br><span class="line">          .css(&#123;</span><br><span class="line">            &quot;line-color&quot;: &quot;#000&quot;,</span><br><span class="line">          &#125;),</span><br><span class="line"></span><br><span class="line">        elements: &#123;</span><br><span class="line">          nodes: [</span><br><span class="line">            &#123; data: &#123; id: &quot;cat&quot; &#125;, classes: [&quot;aa&quot;] &#125;,</span><br><span class="line">            &#123; data: &#123; id: &quot;bird&quot; &#125; &#125;,</span><br><span class="line">            &#123; data: &#123; id: &quot;ladybug&quot; &#125; &#125;,</span><br><span class="line">            &#123; data: &#123; id: &quot;aphid&quot; &#125; &#125;,</span><br><span class="line">            &#123; data: &#123; id: &quot;rose&quot; &#125; &#125;,</span><br><span class="line">            &#123; data: &#123; id: &quot;grasshopper&quot; &#125; &#125;,</span><br><span class="line">            &#123; data: &#123; id: &quot;plant&quot; &#125; &#125;,</span><br><span class="line">            &#123; data: &#123; id: &quot;wheat&quot; &#125; &#125;</span><br><span class="line">          ],</span><br><span class="line">          edges: [</span><br><span class="line">            &#123; data: &#123; source: &quot;cat&quot;, target: &quot;bird&quot; &#125;, classes: [&quot;bb&quot;] &#125;,</span><br><span class="line">            &#123; data: &#123; source: &quot;bird&quot;, target: &quot;ladybug&quot; &#125; &#125;,</span><br><span class="line">            &#123; data: &#123; source: &quot;bird&quot;, target: &quot;grasshopper&quot; &#125; &#125;,</span><br><span class="line">            &#123; data: &#123; source: &quot;grasshopper&quot;, target: &quot;plant&quot; &#125; &#125;,</span><br><span class="line">            &#123; data: &#123; source: &quot;grasshopper&quot;, target: &quot;wheat&quot; &#125; &#125;,</span><br><span class="line">            &#123; data: &#123; source: &quot;ladybug&quot;, target: &quot;aphid&quot; &#125; &#125;,</span><br><span class="line">            &#123; data: &#123; source: &quot;aphid&quot;, target: &quot;rose&quot; &#125; &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        layout: &#123;</span><br><span class="line">          name: &quot;breadthfirst&quot;,</span><br><span class="line">          directed: true,</span><br><span class="line">          padding: 10</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;&#125;,</span><br><span class="line">  mounted: function() &#123;</span><br><span class="line">    this.view_init();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#cy &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 80%;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 50px;</span><br><span class="line">  left: 0px;</span><br><span class="line">  text-align: left;</span><br><span class="line">&#125;</span><br><span class="line">.aa &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">  /* font: 14px helvetica neue, helvetica, arial, sans-serif; */</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>一个简单的示例就创建成功了，具体内容可以根据自己的需求来修改。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>运用wrk进行压力测试</title>
      <link href="/2019/01/09/%E8%BF%90%E7%94%A8wrk%E8%BF%9B%E8%A1%8C%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
      <url>/2019/01/09/%E8%BF%90%E7%94%A8wrk%E8%BF%9B%E8%A1%8C%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>用过了很多压测工具，却一直没找到中意的那款。最近试了wrk感觉不错，写下这份使用指南给自己备忘用，如果能帮到你，那也很好。<br><a id="more"></a><br>安装<br>wrk支持大多数类UNIX系统，不支持windows。需要操作系统支持LuaJIT和OpenSSL，不过不用担心，大多数类Unix系统都支持。安装wrk非常简单，只要从github上下载wrk源码，在项目路径下执行make命令即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/wg/wrk</span><br><span class="line"></span><br><span class="line">make</span><br></pre></td></tr></table></figure><br>make之后，会在项目路径下生成可执行文件wrk，随后就可以用其进行HTTP压测了。可以把这个可执行文件拷贝到某个已在path中的路径，比如/usr/local/bin，这样就可以在任何路径直接使用wrk了。</p><p>默认情况下wrk会使用自带的LuaJIT和OpenSSL，如果你想使用系统已安装的版本，可以使用WITH_LUAJIT和WITH_OPENSSL这两个选项来指定它们的路径。比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make WITH_LUAJIT=/usr WITH_OPENSSL=/usr</span><br></pre></td></tr></table></figure><br>基本使用<br>命令行敲下wrk，可以看到使用帮助<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Usage: wrk &lt;options&gt; &lt;url&gt;                            </span><br><span class="line">  Options:                                            </span><br><span class="line">    -c, --connections &lt;N&gt;  Connections to keep open   </span><br><span class="line">    -d, --duration    &lt;T&gt;  Duration of test           </span><br><span class="line">    -t, --threads     &lt;N&gt;  Number of threads to use   </span><br><span class="line">                                                      </span><br><span class="line">    -s, --script      &lt;S&gt;  Load Lua script file       </span><br><span class="line">    -H, --header      &lt;H&gt;  Add header to request      </span><br><span class="line">        --latency          Print latency statistics   </span><br><span class="line">        --timeout     &lt;T&gt;  Socket/request timeout     </span><br><span class="line">    -v, --version          Print version details      </span><br><span class="line">                                                      </span><br><span class="line">  Numeric arguments may include a SI unit (1k, 1M, 1G)</span><br><span class="line">  Time arguments may include a time unit (2s, 2m, 2h)</span><br></pre></td></tr></table></figure><br>简单翻成中文：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">使用方法: wrk &lt;选项&gt; &lt;被测HTTP服务的URL&gt;                            </span><br><span class="line">  Options:                                            </span><br><span class="line">    -c, --connections &lt;N&gt;  跟服务器建立并保持的TCP连接数量  </span><br><span class="line">    -d, --duration    &lt;T&gt;  压测时间           </span><br><span class="line">    -t, --threads     &lt;N&gt;  使用多少个线程进行压测   </span><br><span class="line">                                                      </span><br><span class="line">    -s, --script      &lt;S&gt;  指定Lua脚本路径       </span><br><span class="line">    -H, --header      &lt;H&gt;  为每一个HTTP请求添加HTTP头      </span><br><span class="line">        --latency          在压测结束后，打印延迟统计信息   </span><br><span class="line">        --timeout     &lt;T&gt;  超时时间     </span><br><span class="line">    -v, --version          打印正在使用的wrk的详细版本信息</span><br><span class="line">                                                      </span><br><span class="line">  &lt;N&gt;代表数字参数，支持国际单位 (1k, 1M, 1G)</span><br><span class="line">  &lt;T&gt;代表时间参数，支持时间单位 (2s, 2m, 2h)</span><br></pre></td></tr></table></figure><br>看下版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wrk -v</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">wrk 4.0.2 [epoll] Copyright (C) 2012 Will Glozer</span><br></pre></td></tr></table></figure><br>看到是4.0.2版本的wrk，使用了epoll。这意味着我们可以用少量的线程来跟被测服务创建大量连接，进行压测。</p><p>做一次简单压测，分析下结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">wrk -t8 -c200 -d30s --latency  &quot;http://www.bing.com&quot;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">Running 30s test @ http://www.bing.com</span><br><span class="line">  8 threads and 200 connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency    46.67ms  215.38ms   1.67s    95.59%</span><br><span class="line">    Req/Sec     7.91k     1.15k   10.26k    70.77%</span><br><span class="line">  Latency Distribution</span><br><span class="line">     50%    2.93ms</span><br><span class="line">     75%    3.78ms</span><br><span class="line">     90%    4.73ms</span><br><span class="line">     99%    1.35s </span><br><span class="line">  1790465 requests in 30.01s, 684.08MB read</span><br><span class="line">Requests/sec:  59658.29</span><br><span class="line">Transfer/sec:     22.79MB</span><br></pre></td></tr></table></figure><br>以上使用8个线程200个连接，对bing首页进行了30秒的压测，并要求在压测结果中输出响应延迟信息。以下对压测结果进行简单注释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Running 30s test @ http://www.bing.com （压测时间30s）</span><br><span class="line">  8 threads and 200 connections （共8个测试线程，200个连接）</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">              （平均值） （标准差）（最大值）（正负一个标准差所占比例）</span><br><span class="line">    Latency    46.67ms  215.38ms   1.67s    95.59%</span><br><span class="line">    （延迟）</span><br><span class="line">    Req/Sec     7.91k     1.15k   10.26k    70.77%</span><br><span class="line">    （处理中的请求数）</span><br><span class="line">  Latency Distribution （延迟分布）</span><br><span class="line">     50%    2.93ms</span><br><span class="line">     75%    3.78ms</span><br><span class="line">     90%    4.73ms</span><br><span class="line">     99%    1.35s （99分位的延迟）</span><br><span class="line">  1790465 requests in 30.01s, 684.08MB read （30.01秒内共处理完成了1790465个请求，读取了684.08MB数据）</span><br><span class="line">Requests/sec:  59658.29 （平均每秒处理完成59658.29个请求）</span><br><span class="line">Transfer/sec:     22.79MB （平均每秒读取数据22.79MB）</span><br></pre></td></tr></table></figure><p>可以看到，wrk使用方便，结果清晰。并且因为非阻塞IO的使用，可以在普通的测试机上创建出大量的连接，从而达到较好的压测效果。</p><p>使用Lua脚本个性化wrk压测<br>以上两节安装并简单使用了wrk，但这种简单的压测可能不能满足我们的需求。比如我们可能需要使用POST METHOD跟服务器交互；可能需要为每一次请求使用不同的参数，以更好的模拟服务的实际使用场景等。wrk支持用户使用–script指定Lua脚本，来定制压测过程，满足个性化需求。</p><p>介绍wrk对Lua脚本的支持<br>wrk支持在三个阶段对压测进行个性化，分别是启动阶段、运行阶段和结束阶段。每个测试线程，都拥有独立的Lua运行环境。</p><p>启动阶段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function setup(thread)</span><br></pre></td></tr></table></figure><br>在脚本文件中实现setup方法，wrk就会在测试线程已经初始化但还没有启动的时候调用该方法。wrk会为每一个测试线程调用一次setup方法，并传入代表测试线程的对象thread作为参数。setup方法中可操作该thread对象，获取信息、存储信息、甚至关闭该线程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">thread.addr             - get or set the thread&apos;s server address</span><br><span class="line">thread:get(name)        - get the value of a global in the thread&apos;s env</span><br><span class="line">thread:set(name, value) - set the value of a global in the thread&apos;s env</span><br><span class="line">thread:stop()           - stop the thread</span><br><span class="line">运行阶段</span><br><span class="line">function init(args)</span><br><span class="line">function delay()</span><br><span class="line">function request()</span><br><span class="line">function response(status, headers, body)</span><br></pre></td></tr></table></figure><p>init由测试线程调用，只会在进入运行阶段时，调用一次。支持从启动wrk的命令中，获取命令行参数； delay在每次发送request之前调用，如果需要delay，那么delay相应时间； request用来生成请求；每一次请求都会调用该方法，所以注意不要在该方法中做耗时的操作； reponse在每次收到一个响应时调用；为提升性能，如果没有定义该方法，那么wrk不会解析headers和body；</p><p>结束阶段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function done(summary, latency, requests)</span><br></pre></td></tr></table></figure><br>该方法在整个测试过程中只会调用一次，可从参数给定的对象中，获取压测结果，生成定制化的测试报告。</p><p>自定义脚本中可访问的变量和方法<br>变量：wrk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wrk = &#123;</span><br><span class="line">   scheme  = &quot;http&quot;,</span><br><span class="line">   host    = &quot;localhost&quot;,</span><br><span class="line">   port    = nil,</span><br><span class="line">   method  = &quot;GET&quot;,</span><br><span class="line">   path    = &quot;/&quot;,</span><br><span class="line">   headers = &#123;&#125;,</span><br><span class="line">   body    = nil,</span><br><span class="line">   thread  = &lt;userdata&gt;,</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>一个table类型的变量wrk，是全局变量，修改该table，会影响所有请求。</p><p>方法：wrk.fomat wrk.lookup wrk.connect</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function wrk.format(method, path, headers, body)</span><br><span class="line"></span><br><span class="line">  wrk.format returns a HTTP request string containing the passed parameters</span><br><span class="line">  merged with values from the wrk table.</span><br><span class="line">  根据参数和全局变量wrk，生成一个HTTP rquest string。</span><br><span class="line"></span><br><span class="line">function wrk.lookup(host, service)</span><br><span class="line"></span><br><span class="line">  wrk.lookup returns a table containing all known addresses for the host</span><br><span class="line">  and service pair. This corresponds to the POSIX getaddrinfo() function.</span><br><span class="line">  给定host和service（port/well known service name），返回所有可用的服务器地址信息。</span><br><span class="line"></span><br><span class="line">function wrk.connect(addr)</span><br><span class="line"></span><br><span class="line">  wrk.connect returns true if the address can be connected to, otherwise</span><br><span class="line">  it returns false. The address must be one returned from wrk.lookup().</span><br><span class="line">  测试与给定的服务器地址信息是否可以成功创建连接</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>示例<br>使用POST METHOD</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wrk.method = &quot;POST&quot;</span><br><span class="line">wrk.body   = &quot;foo=bar&amp;baz=quux&quot;</span><br><span class="line">wrk.headers[&quot;Content-Type&quot;] = &quot;application/x-www-form-urlencoded&quot;</span><br></pre></td></tr></table></figure><p>通过修改全局变量wrk，使得所有请求都使用POST方法，并指定了body和Content-Type头。</p><p>为每次request更换一个参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">request = function()</span><br><span class="line">   uid = math.random(1, 10000000)</span><br><span class="line">   path = &quot;/test?uid=&quot; .. uid</span><br><span class="line">   return wrk.format(nil, path)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><br>通过在request方法中随机生成1~10000000之间的uid，使得请求中的uid参数随机。</p><p>每次请求之前延迟10ms<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function delay()</span><br><span class="line">   return 10</span><br><span class="line">end</span><br></pre></td></tr></table></figure><br>每个线程要先进行认证，认证之后获取token以进行压测<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">token = nil</span><br><span class="line">path  = &quot;/authenticate&quot;</span><br><span class="line"></span><br><span class="line">request = function()</span><br><span class="line">   return wrk.format(&quot;GET&quot;, path)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">response = function(status, headers, body)</span><br><span class="line">   if not token and status == 200 then</span><br><span class="line">      token = headers[&quot;X-Token&quot;]</span><br><span class="line">      path  = &quot;/resource&quot;</span><br><span class="line">      wrk.headers[&quot;X-Token&quot;] = token</span><br><span class="line">   end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><br>在没有token的情况下，先访问/authenticate认证。认证成功后，读取token并替换path为/resource。</p><p>压测支持HTTP pipeline的服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">init = function(args)</span><br><span class="line">   local r = &#123;&#125;</span><br><span class="line">   r[1] = wrk.format(nil, &quot;/?foo&quot;)</span><br><span class="line">   r[2] = wrk.format(nil, &quot;/?bar&quot;)</span><br><span class="line">   r[3] = wrk.format(nil, &quot;/?baz&quot;)</span><br><span class="line"></span><br><span class="line">   req = table.concat(r)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">request = function()</span><br><span class="line">   return req</span><br><span class="line">end</span><br></pre></td></tr></table></figure><br>通过在init方法中将三个HTTP request请求拼接在一起，实现每次发送三个请求，以使用HTTP pipeline。</p><p>最后<br>源码非常简洁，简单读了读，很佩服wrk的作者。</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>创建多个ssh-key</title>
      <link href="/2018/12/19/%E5%88%9B%E5%BB%BA%E5%A4%9A%E4%B8%AAssh-key/"/>
      <url>/2018/12/19/%E5%88%9B%E5%BB%BA%E5%A4%9A%E4%B8%AAssh-key/</url>
      
        <content type="html"><![CDATA[<p>生产环境下经常需要为同一台机器配置多个ssh-key并且在访问指定服务器时使用指定的key<br><a id="more"></a><br>首先简单了解一下ssh：</p><p>Secure Shell（安全外壳协议，简称 SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。多应用在远程登录服务器，git拉取与推送，在不是用密码登录的情况下可以通过创建一对ssh私钥与ssh公钥进行免密登录以及git操作。</p><p>创建第一个ssh-key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh                                 #首先先进入ssh目录下</span><br><span class="line">ssh-keygen -t rsa -C &quot;email@gmail.com&quot;    #创建第一个ssh-key</span><br></pre></td></tr></table></figure><p>之后会看见<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Enter file in which to save the key (/Users/aamen/.ssh/id_rsa): test1   #给要创建的 ssh-key 命名</span><br><span class="line">Enter passphrase (empty for no passphrase):                             #指定密码（空为不指定）</span><br><span class="line">Enter same passphrase again:                                            #重复输入密码</span><br></pre></td></tr></table></figure><br>这就创建完成第一个ssh-key 并且在 ~/.ssh 目录下发现多了两个文件分别是 tes1 和 test1.pub</p><p>再次输入创建新的 ssh-key 并且命名为 test2</p><p>现在 ~/.ssh 目录下有4个文件 分别是 tes1 test1.pub 以及 tes2 和 test2.pub</p><p>然后执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config</span><br></pre></td></tr></table></figure><br>将里面内容修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host github                          # alias名称</span><br><span class="line">HostName github.com                  # host domain 或 ip</span><br><span class="line">Port port-number                     # host 的 SSH port 可不填 默认22</span><br><span class="line">PreferredAuthentications publickey   # 强制使用 Public Key 验证</span><br><span class="line">IdentitiesOnly yes                   # 使用指定的 key</span><br><span class="line">IdentityFile ~/.ssh/test1            # 指定 pem 或 pub 的 key 路径</span><br><span class="line">User username-on-remote-machine      # 登录 SSH 的 username 可不填</span><br></pre></td></tr></table></figure><br>保存并退出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:wq!</span><br></pre></td></tr></table></figure></p><p>测试一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><br>成功后返回<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi xxx! You&apos;ve successfully authenticated, but GitHub does not # provide shell access.</span><br></pre></td></tr></table></figure><br>然后再次修改 config 并添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host gitlab                          # alias名称</span><br><span class="line">HostName gitlab.com                  # host domain 或 ip</span><br><span class="line">Port port-number                     # host 的 SSH port 可不填 默认22</span><br><span class="line">PreferredAuthentications publickey   # 强制使用 Public Key 验证</span><br><span class="line">IdentitiesOnly yes                   # 使用指定的 key</span><br><span class="line">IdentityFile ~/.ssh/test2            # 指定 pem 或 pub 的 key 路径</span><br><span class="line">User username-on-remote-machine      # 登录 SSH 的 username 可不填</span><br></pre></td></tr></table></figure><br>测试一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh -T git@gitlab.com</span><br><span class="line">Welcome to GitLab, @xxx!</span><br></pre></td></tr></table></figure><br>大功告成~</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker搭建php服务</title>
      <link href="/2018/12/07/nginx%E9%85%8D%E7%BD%AEphp/"/>
      <url>/2018/12/07/nginx%E9%85%8D%E7%BD%AEphp/</url>
      
        <content type="html"><![CDATA[<p>1.登录远端服务器并且下载docker<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install docker</span><br></pre></td></tr></table></figure><br>下载完成后运行 docker info 如果输出docker信息则表示docker安装成功<br> <a id="more"></a><br>安装成功后，拉取nginx、php镜像并查看已有镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx      #拉取nginx镜像</span><br><span class="line">docker pull php:5.6    #拉取php5.6镜像</span><br><span class="line">docker images          #查看已有镜像</span><br></pre></td></tr></table></figure></p><p>镜像拉取成功后，开始构建容器并挂载nginx配置目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p nginx/www nginx/conf #创建nginx目录用来挂载容器www和conf目录</span><br></pre></td></tr></table></figure></p><ul><li>mkdir -p, –parents  可以是一个路径名称。此时若路径中的某些目录尚不存在, 加上此选项后, 系统将自动建立好那些尚不存在的目录, 即一次可以建立多个目录; </li></ul><p>创建容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#构建php容器</span><br><span class="line">docker run -d -p 9000:9000 -v $PWD/www:/usr/share/nginx/html --name myphpfpm php:5.6-fpm </span><br><span class="line">#构建Nginx容器</span><br><span class="line">docker run -d -p 8080:80 -v $PWD/www:/usr/share/nginx/html --name mynginx --link myphpfpm:phpfpm nginx </span><br><span class="line">docker ps -a      #查看所有已创建的容器 </span><br></pre></td></tr></table></figure><br>查看容器运行状态status，如果创建容器后容器自动退出，先删除容器，再重新用以下命令创建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm [CONTAINER ID] #删除容器</span><br><span class="line">docker run -dit -p 9000:9000 -v $PWD/www:/usr/share/nginx/html --name myphpfpm php:5.6-fpm </span><br><span class="line">docker run -dit -p 8080:80 -v $PWD/www:/usr/share/nginx/html --name mynginx --link myphpfpm:phpfpm nginx</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><figcaption><span>docker run -it</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-i: 以交互模式运行容器，通常与 -t 同时使用；</span><br><span class="line">-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br></pre></td></tr></table></figure><p>创建完容器并且运行成功后配置nginx容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mynginx /bin/bash</span><br><span class="line">vim /etc/nginx/conf.d/default.conf #若无vi 先运行 apt-get update、 apt-get install vim 下载并安装vim</span><br></pre></td></tr></table></figure></p><p>docker exec [OPTIONS] CONTAINER COMMAND [ARG…]<br>-d : 分离模式: 在后台运行<br>-i : 即使没有附加也保持 STDIN 打开<br>-t : 分配一个伪终端</p><p>修改default.conf中php配置如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">   fastcgi_pass   phpfpm:9000;</span><br><span class="line">   fastcgi_index  index.php;</span><br><span class="line">   fastcgi_param  SCRIPT_FILENAME  /usr/share/nginx/html$fastcgi_script_name;</span><br><span class="line">   fastcgi_param  SCRIPT_NAME      $fastcgi_script_name;</span><br><span class="line">   include        fastcgi_params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//重新加载nginx配置并生效后退出容器 </span><br><span class="line">//nginx -s reload</span><br><span class="line">//exit</span><br></pre></td></tr></table></figure><br>重启nginx并退出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br><span class="line">docker restart mynginx</span><br></pre></td></tr></table></figure><br>安装数据库扩展<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec  -it myphpfpm /bin/bash</span><br><span class="line">docker-php-ext-install bcmath dba exif mysqli pdo_mysql sysvsem sysvshm </span><br></pre></td></tr></table></figure><br>安装redis<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec  -it myphpfpm /bin/bash</span><br><span class="line">pecl install redis &amp;&amp; docker-php-ext-enable redis</span><br></pre></td></tr></table></figure><br>安装pecl扩展<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// Install PECL extensions</span><br><span class="line">$ apt-get install -y \</span><br><span class="line"></span><br><span class="line">    // for memcache</span><br><span class="line">    libmemcache-dev \</span><br><span class="line"></span><br><span class="line">    // for memcached</span><br><span class="line">    libmemcached-dev \</span><br><span class="line"></span><br><span class="line">    &amp;&amp; pecl install memcache &amp;&amp; docker-php-ext-enable memcache \</span><br><span class="line">    &amp;&amp; pecl install memcached &amp;&amp; docker-php-ext-enable memcached \</span><br><span class="line">    &amp;&amp; pecl install gearman &amp;&amp; docker-php-ext-enable gearman \</span><br><span class="line">    &amp;&amp; pecl install xdebug &amp;&amp; docker-php-ext-enable xdebug \</span><br><span class="line">    &amp;&amp; pecl install redis &amp;&amp; docker-php-ext-enable redis \</span><br><span class="line">    &amp;&amp; pecl install xhprof &amp;&amp; docker-php-ext-enable xhprof </span><br></pre></td></tr></table></figure></p><p>安装php x-cache 扩展<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL &apos;https://xcache.lighttpd.net/pub/Releases/3.2.0/xcache-3.2.0.tar.gz&apos; -o xcache.tar.gz \</span><br><span class="line">     &amp;&amp; mkdir -p xcache \</span><br><span class="line">     &amp;&amp; tar -xf xcache.tar.gz -C xcache --strip-components=1 \</span><br><span class="line">     &amp;&amp; rm xcache.tar.gz \</span><br><span class="line">     &amp;&amp; ( \</span><br><span class="line">         cd xcache \</span><br><span class="line">         &amp;&amp; phpize \</span><br><span class="line">         &amp;&amp; ./configure --enable-xcache \</span><br><span class="line">         &amp;&amp; make -j$(nproc) \</span><br><span class="line">         &amp;&amp; make install \</span><br><span class="line">     ) \</span><br><span class="line">     &amp;&amp; rm -r xcache \</span><br><span class="line">     &amp;&amp; docker-php-ext-enable xcache</span><br></pre></td></tr></table></figure><br>安装完之后退出myphpfpm容器并重启<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart myphpfpm</span><br></pre></td></tr></table></figure></p><p>重启后查看phpinfo发现x-cache已工作</p><p>容器的保存、导出与导入</p><p>先将生成好的容器创建为镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker commit myphpfpm myphpfpm_img</span><br><span class="line">docker commit mynginx  mynginx_img</span><br></pre></td></tr></table></figure><br>保存指定镜像为tar文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker images #查看生成好的镜像id</span><br><span class="line">docker save [IMAGE ID] &gt; xxx.tar</span><br></pre></td></tr></table></figure><br>保存成功之后 先让我们删除之前创建的所有容器以及镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps -aq)</span><br><span class="line">docker rm $(docker ps -aq)</span><br><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure><br>加载image<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt; xxx.tar #之前生成的image压缩文件</span><br></pre></td></tr></table></figure><br>加载成功后标记本地镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker tag [IMAGE ID] xxx:1</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
