<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>docker搭建php服务</title>
      <link href="/Bblog/2018/12/07/nginx%E9%85%8D%E7%BD%AEphp/"/>
      <url>/Bblog/2018/12/07/nginx%E9%85%8D%E7%BD%AEphp/</url>
      
        <content type="html"><![CDATA[<p>1.登录远端服务器并且下载docker<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install docker</span><br></pre></td></tr></table></figure><br>下载完成后运行 docker info 如果输出docker信息则表示docker安装成功<br> <a id="more"></a><br>安装成功后，拉取nginx、php镜像并查看已有镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx      #拉取nginx镜像</span><br><span class="line">docker pull php:5.6    #拉取php5.6镜像</span><br><span class="line">docker images          #查看已有镜像</span><br></pre></td></tr></table></figure></p><p>镜像拉取成功后，开始构建容器并挂载nginx配置目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p nginx/www nginx/conf #创建nginx目录用来挂载容器www和conf目录</span><br></pre></td></tr></table></figure></p><ul><li>mkdir -p, –parents  可以是一个路径名称。此时若路径中的某些目录尚不存在, 加上此选项后, 系统将自动建立好那些尚不存在的目录, 即一次可以建立多个目录; </li></ul><p>创建容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#构建php容器</span><br><span class="line">docker run -d -p 9000:9000 -v $PWD/www:/usr/share/nginx/html --name myphpfpm php:5.6-fpm </span><br><span class="line">#构建Nginx容器</span><br><span class="line">docker run -d -p 8080:80 -v $PWD/www:/usr/share/nginx/html --name mynginx --link myphpfpm:phpfpm nginx </span><br><span class="line">docker ps -a      #查看所有已创建的容器 </span><br></pre></td></tr></table></figure><br>查看容器运行状态status，如果创建容器后容器自动退出，先删除容器，再重新用以下命令创建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm [CONTAINER ID] #删除容器</span><br><span class="line">docker run -dit -p 9000:9000 -v $PWD/www:/usr/share/nginx/html --name myphpfpm php:5.6-fpm </span><br><span class="line">docker run -dit -p 8080:80 -v $PWD/www:/usr/share/nginx/html --name mynginx --link myphpfpm:phpfpm nginx</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><figcaption><span>docker run -it</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-i: 以交互模式运行容器，通常与 -t 同时使用；</span><br><span class="line">-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br></pre></td></tr></table></figure><p>创建完容器并且运行成功后配置nginx容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mynginx /bin/bash</span><br><span class="line">vim /etc/nginx/conf.d/default.conf #若无vi 先运行 apt-get update、 apt-get install vim 下载并安装vim</span><br></pre></td></tr></table></figure></p><p>docker exec [OPTIONS] CONTAINER COMMAND [ARG…]<br>-d : 分离模式: 在后台运行<br>-i : 即使没有附加也保持 STDIN 打开<br>-t : 分配一个伪终端</p><p>修改default.conf中php配置如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">   fastcgi_pass   phpfpm:9000;</span><br><span class="line">   fastcgi_index  index.php;</span><br><span class="line">   fastcgi_param  SCRIPT_FILENAME  /usr/share/nginx/html$fastcgi_script_name;</span><br><span class="line">   fastcgi_param  SCRIPT_NAME      $fastcgi_script_name;</span><br><span class="line">   include        fastcgi_params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//重新加载nginx配置并生效后退出容器 </span><br><span class="line">//nginx -s reload</span><br><span class="line">//exit</span><br></pre></td></tr></table></figure><br>重启nginx并退出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br><span class="line">docker restart mynginx</span><br></pre></td></tr></table></figure><br>安装数据库扩展<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec  -it myphpfpm /bin/bash</span><br><span class="line">docker-php-ext-install bcmath dba exif mysqli pdo_mysql sysvsem sysvshm </span><br></pre></td></tr></table></figure><br>安装redis<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec  -it myphpfpm /bin/bash</span><br><span class="line">pecl install redis &amp;&amp; docker-php-ext-enable redis</span><br></pre></td></tr></table></figure><br>安装pecl扩展<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// Install PECL extensions</span><br><span class="line">$ apt-get install -y \</span><br><span class="line"></span><br><span class="line">    // for memcache</span><br><span class="line">    libmemcache-dev \</span><br><span class="line"></span><br><span class="line">    // for memcached</span><br><span class="line">    libmemcached-dev \</span><br><span class="line"></span><br><span class="line">    &amp;&amp; pecl install memcache &amp;&amp; docker-php-ext-enable memcache \</span><br><span class="line">    &amp;&amp; pecl install memcached &amp;&amp; docker-php-ext-enable memcached \</span><br><span class="line">    &amp;&amp; pecl install gearman &amp;&amp; docker-php-ext-enable gearman \</span><br><span class="line">    &amp;&amp; pecl install xdebug &amp;&amp; docker-php-ext-enable xdebug \</span><br><span class="line">    &amp;&amp; pecl install redis &amp;&amp; docker-php-ext-enable redis \</span><br><span class="line">    &amp;&amp; pecl install xhprof &amp;&amp; docker-php-ext-enable xhprof </span><br></pre></td></tr></table></figure></p><p>安装php x-cache 扩展<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL &apos;https://xcache.lighttpd.net/pub/Releases/3.2.0/xcache-3.2.0.tar.gz&apos; -o xcache.tar.gz \</span><br><span class="line">     &amp;&amp; mkdir -p xcache \</span><br><span class="line">     &amp;&amp; tar -xf xcache.tar.gz -C xcache --strip-components=1 \</span><br><span class="line">     &amp;&amp; rm xcache.tar.gz \</span><br><span class="line">     &amp;&amp; ( \</span><br><span class="line">         cd xcache \</span><br><span class="line">         &amp;&amp; phpize \</span><br><span class="line">         &amp;&amp; ./configure --enable-xcache \</span><br><span class="line">         &amp;&amp; make -j$(nproc) \</span><br><span class="line">         &amp;&amp; make install \</span><br><span class="line">     ) \</span><br><span class="line">     &amp;&amp; rm -r xcache \</span><br><span class="line">     &amp;&amp; docker-php-ext-enable xcache</span><br></pre></td></tr></table></figure><br>安装完之后退出myphpfpm容器并重启<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart myphpfpm</span><br></pre></td></tr></table></figure></p><p>重启后查看phpinfo发现x-cache已工作</p><p>容器的保存、导出与导入</p><p>先将生成好的容器创建为镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker commit myphpfpm myphpfpm_img</span><br><span class="line">docker commit mynginx  mynginx_img</span><br></pre></td></tr></table></figure><br>保存指定镜像为tar文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker images #查看生成好的镜像id</span><br><span class="line">docker save [IMAGE ID] &gt; xxx.tar</span><br></pre></td></tr></table></figure><br>保存成功之后 先让我们删除之前创建的所有容器以及镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps -aq)</span><br><span class="line">docker rm $(docker ps -aq)</span><br><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure><br>加载image<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt; xxx.tar #之前生成的image压缩文件</span><br></pre></td></tr></table></figure><br>加载成功后标记本地镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker tag [IMAGE ID] xxx:1</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
